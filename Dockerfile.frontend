## ---------------------------------------------------------------------------
## Frontend Multiâ€‘Stage Dockerfile (CRA + Nginx)
##  - Installs dependencies with deterministic lockfile if present
##  - Injects WebSocket URL at build time (REACT_APP_WS_BRIDGE_URL)
##  - Copies only production build artifacts
##  - Runs as non-root (nginx user)
## ---------------------------------------------------------------------------
# syntax=docker/dockerfile:1

ARG NODE_VERSION=20-alpine
FROM node:${NODE_VERSION} AS deps
WORKDIR /app

# Leverage cache: copy only manifest files first
COPY front/package.json front/package-lock.json* front/yarn.lock* ./

# Prefer npm ci when lock present; fallback gracefully
RUN if [ -f package-lock.json ]; then npm ci --legacy-peer-deps; \
	elif [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
	else npm install --legacy-peer-deps; fi

FROM node:${NODE_VERSION} AS build
WORKDIR /app
ENV CI=true
ARG REACT_APP_WS_BRIDGE_URL=ws://localhost:9003
ENV REACT_APP_WS_BRIDGE_URL=${REACT_APP_WS_BRIDGE_URL}

COPY --from=deps /app/node_modules ./node_modules
COPY front/ .

# Safety: ensure react-scripts available
RUN npx react-scripts --version || (echo "react-scripts missing" && exit 1)

# Build (avoid writing source map if size sensitive; keep for now)
RUN npm run build || (echo "Build failed" && ls -al && exit 1)

FROM nginx:1.27-alpine AS runtime
WORKDIR /usr/share/nginx/html

# Copy build output
COPY --from=build /app/build ./

# Nginx config (SPA fallback already handled in provided config)
COPY front/nginx.conf /etc/nginx/conf.d/default.conf

# Drop default 50x.html etc if not needed (optional)
RUN rm -f /etc/nginx/conf.d/default.conf.default 2>/dev/null || true

# Prepare writable dirs for non-root nginx user & remove redundant 'user' directive from main config
RUN mkdir -p /var/cache/nginx /var/run/nginx \ 
	&& chown -R nginx:nginx /var/cache/nginx /var/run/nginx /var/log/nginx \ 
	&& sed -i '/^user /d' /etc/nginx/nginx.conf
	# Pre-create pid file path so non-root user can write
RUN touch /run/nginx.pid && chown nginx:nginx /run/nginx.pid || true

USER nginx
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
